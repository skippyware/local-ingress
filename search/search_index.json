{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Local Ingress","text":"<p>Local Ingress is an opinionated stack aimed at making it easier to run multiple containerized projects and services locally.</p> <p>The key features are:</p> <ul> <li>Simple - Services are exposed on standard ports (80 - HTTP, and 443 - HTTPS) without conflict.</li> <li>Routing - Services define their own routes via Host, Headers, Path, Params, etc. using Traefik rules.</li> <li>DNS - Services can resolve DNS entries for other exposed services.</li> <li>TLS - Services can choose to expose behind HTTPS listener with automatic certificate enrollment and renewal.  Wildcard certificates are fully supported.</li> <li>Decoupled - Services manage their own configurations via Docker Labels.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<ol> <li>Clone the Local Ingress repository.</li> </ol> <pre><code>git clone https://github.com/skippysoft/local-ingress &amp;&amp; cd local-ingress\n</code></pre> <ol> <li>Follow the installation instructions for your system.</li> <li>Start the stack.</li> </ol> <pre><code>docker compose up -d\n</code></pre> <ol> <li>Add <code>ingress-net</code> network to projects/services compose file.</li> </ol> <pre><code>networks:\n  ingress-net:\n    name: ingress-net\n</code></pre> <ol> <li>Add container labels and attach containers to projects/services compose file.</li> </ol> <pre><code>services:\n  app:\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.example-app.rule=Host(`app.example.test`)\"\n      - \"traefik.http.routers.example-app.entrypoints=websecure\"\n      - \"traefik.http.routers.example-app.tls=true\"\n      - \"traefik.http.routers.example-app.tls.certresolver=default\"\n      - \"traefik.http.routers.example-app.service=example-app\"\n      - \"traefik.http.services.example-app.loadbalancer.server.port=80\"\n      - \"traefik.docker.network=ingress-net\"\n    networks:\n      - ingress-net\n      - default  # include any other docker networks required\n</code></pre> <ol> <li> <p>Start projects/services.</p> </li> <li> <p>Access your project/service via the ingress: https://app.example.test</p> </li> </ol>"},{"location":"getting-started/install/","title":"Installation","text":"<p>Local Ingress requires two configuration changes to the host system:</p> <ul> <li>DNS Zone Reoslver - This allows the host to send DNS queries for our zone to the stack.</li> <li>Loopback Alias to Docker Desktop Subnet Gateway (MacOS and Windows only) - Docker Desktop runs in a Virtual Machine on MacOS and Windows.  This allows the MacOS/Windows host to understand that Docker's magic <code>host-gateway</code> IP address is for the loopback interface.</li> </ul>"},{"location":"getting-started/install/#build-docker-images-optional","title":"Build Docker Images (Optional)","text":"<p>This is optional as Docker Compose will build the images on first run.  It may help to do this in a separate step to better track command output.</p> <pre><code>docker compose build\n</code></pre>"},{"location":"getting-started/install/#generate-system-configuration","title":"Generate System Configuration","text":"<p>Note</p> <p>Any configuration changes to the Docker Desktop subnet will require an update to the host system configuration to get the correct alias for the loopback interface.  It isn't common for the Docker Desktop subnet to change unless you have a collision with a local network.</p> <p>This will run a container to get the Docker <code>host-gateway</code> IP address and template out system configuration files.</p> MacOSLinuxWindows <pre><code>make system-config-generate\n</code></pre> <pre><code>make system-config-generate\n</code></pre> <pre><code>make system-config-generate\n</code></pre> <p>Generated files:</p> File Description <code>system-config/docker.gateway</code> Docker Desktop subnet gateway IP address <code>system-config/darwin/org.user.lo0-docker-gateway-alias.plist</code> MacOS launch definition to alias the loopback interface on restart"},{"location":"getting-started/install/#add-dns-resolver","title":"Add DNS Resolver","text":"MacOSLinuxWindows <p>Manual</p> <p>With root priviledges, open <code>/etc/resolver/test</code> and add the following:</p> <pre><code>nameserver 127.0.0.1\nport 1053\n</code></pre> <p>Automated</p> <pre><code>cat &lt;&lt;EOF |\nnameserver 127.0.0.1\nport 1053\nEOF\nsudo tee /etc/resolver/test &gt;/dev/null\n</code></pre> <p>systemd-resolved</p> <p>With root priviledges, open <code>/etc/systemd/resolved.conf</code> and add the following:</p> <pre><code>[Resolve]\nDNS=127.0.0.1:1053\nDomains=~test\n</code></pre> <pre><code>make system-config-generate\n</code></pre>"},{"location":"getting-started/install/#alias-loopback-interface","title":"Alias Loopback Interface","text":"MacOSLinuxWindows <p>Manual</p> <pre><code>sudo install -g wheel -o root -m 0644 \\\n    ./system-config/darwin/org.user.lo0-docker-gateway-alias.plist \\\n    /Library/LaunchDaemons/org.user.lo0-docker-gateway-alias.plist\n</code></pre> <pre><code>sudo launchctl load \\\n    /Library/LaunchDaemons/org.user.lo0-docker-gateway-alias.plist\n</code></pre> <p>Automated</p> <pre><code>make system-config\n</code></pre> <p>Not required!</p> <pre><code>type system-config\\docker.gateway\n</code></pre> <pre><code>netsh interface ip add address \"Loopback\" DOCKER_GW_ADDRESS 255.255.255.0\n</code></pre>"},{"location":"getting-started/root-ca/","title":"Root CA","text":"<p>In some cases it may be required to configure other services to trust the Local Ingress Root CA.  The Root CA may be exported from the stack by running one of the following commands:</p> <pre><code>make ca-extract\n</code></pre> <p>or</p> <pre><code>docker compose cp \\\n    --follow-link stepca:/home/step/certs/root_ca.crt \\\n    ./system-config/ca.crt\n</code></pre>"},{"location":"getting-started/stack/","title":"Managing Stack","text":"<p>Local Ingress is a simple set of containers managed by Docker Compose.</p>"},{"location":"getting-started/stack/#start","title":"Start","text":"<p>Start the services, creating a PKI on first run.</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"getting-started/stack/#stop","title":"Stop","text":"<p>Stop the services, keeping your PKI.</p> <pre><code>docker compose down\n</code></pre>"},{"location":"getting-started/stack/#rebuildrecreate","title":"Rebuild/Recreate","text":"<p>Rebuilding is a matter of destroying the volumes and starting the stack.</p> <pre><code>docker compose down -v\n</code></pre>"},{"location":"getting-started/uninstall/","title":"Uninstall","text":"<p>Coming soon</p>"},{"location":"stack/","title":"Stack","text":"<p>Local Ingress is primarily built upon the great work of other open source initiatives.  The stack consists of 5 services that make this possible.</p> <ul> <li>Traefik - Ingress service.</li> <li>Step CA - Certificate manager and ACME provider.</li> <li>ACME DNS - ACME DNS challenge service.</li> <li>CoreDNS - Primary DNS forwarder.</li> <li>DNS Zone - Simple ACME DNS HTTP storage service and DNS Zone template engine.</li> </ul>"},{"location":"stack/#ingress","title":"Ingress","text":"<p>Traefik proxy provides all ingress functionality.  Services are automatically discovered and the configuration loaded via the Docker provider.  The Traefik Docker provider uses container labels to retrieve routing configuration, service port, TLS configuration (optional), etc.</p> <p>Local Ingress disables containers by default from being attached to the Traefik proxy.  As it is common for projects/services to include a number of internal support services (e.g. database, cache, queues, etc.), many containers for a project should not be exposed.  Only those containers that should be exposed via Traefik will be explicity marked via container labels.</p> <p>Local Ingress exposes the following ports:</p> <ul> <li>80 (HTTP) - Unencrypted HTTP traffic.  Also used for ACME HTTP-01 challeneges by Traefik and Step CA.</li> <li>443 (HTTPS) - TLS encrypted HTTP traffic.</li> <li>8080 (HTTP Alt) - Traefik proxy dashboard.</li> </ul> <p>Provided By: Traefik</p>"},{"location":"stack/#pki","title":"PKI","text":"<p>A simple PKI, consisting of Root and Intermediate CAs, is created on your system.  For security, no PKI artifacts or key material exists staically or is provided by Local Ingress.  At any time this PKI can be re-created by stopping the stack and destroying the container volumes.  The stack will reinitialize and create a new PKI.</p> <p>Provided By: Step CA</p>"},{"location":"stack/#dns","title":"DNS","text":"<p>DNS is what makes Local Ingress possible across various project/service repositories.  DNS must be resolvable from the host system as well as within each container.  The host configuration makes it possible for the default Docker DNS resolver to expose the zone without any additional DNS overrides in each project/service.</p> <p>The stack DNS resolver is configured on the host as a resolver for the zone (default <code>.test</code>).</p> <p>Provided By: CoreDNS, ACME DNS, and DNS Zone</p>"}]}